@startuml AirplaneGame

class AssimpNodeData <<struct>> {
    + name : string <<get>> <<set>>
    + childrenCount : int <<get>> <<set>>
    + AssimpNodeData : AssimpNodeData[]

}

class Camera {
    + Camera(position:Vector3, aspectRatio:float)
    + AspectRatio : float <<set>>
    + MouseSensitivity : float <<get>> <<set>>
    + MovementSpeed : float <<get>> <<set>>
    + Zoom : float <<get>> <<set>>
    + Pitch : float <<get>> <<set>>
    + Yaw : float <<get>> <<set>>
    + Fov : float <<get>> <<set>>
    + Position : Vector3
    + Front : Vector3
    + Up : Vector3
    + Right : Vector3
    + GetViewMatrix() : Matrix4
    + GetProjectionMatrix() : Matrix4
    + UpdateVectors()
}
class Model {
    + directory : string
    + gammaCorrection : bool = false
    + offset : Matrix4
    + meshes : Structures.Meshes[]
    + Model(path:string)
    + Draw(shader:Shader) : void
    + setMeshAngle(eulerAngles:Vector3, name:string)
    + rotateMesh(x,y,z:float, name:string)
    + lockMeshRotation(x,y,z:bool, name:string)
    + rotateModel(xRotation:float, yRotation:float, zRotation:float)
}

class Armature {
    + MeshDictionary : Dictionary
}
class Airplane{
    
}

class Terrain{
    
}
Armature --+ Model
Airplane +-- Model
Terrain +-- Model

class Shader {
    + <<readonly>> Handle : int
    + Shader(vertPath:string, fragPath:string)
    + Use() : void
    + GetAttribLocation(attribName:string) : int
    + SetInt(name:string, data:int) : void
    + SetFloat(name:string, data:float) : void
    + SetMatrix4(name:string, data:Matrix4) : void
    + SetVector3(name:string, data:Vector3) : void
}

package Structures {
class Vertex {
    + Position  : Vector3
    + Normal    : Vector3
    + TexCoord  : Vector2
    + Tangent   : Vector3
    + Bitangent : Vector3
}
class Texture <<struct>> {
    + id : int
    + type : string
    + path : string
}

class Mesh {
    - VAO : VertexArrayObject
    - VBO : VertexBufferArray
    - EBO : ElementBufferObject
    + transformMatrix : Matrix4
    + vertices : Vertex[]
    + indicies : int[]
    + textures : Texture[]
    + Mesh(vertices:Vertex[], indicies:int[], textures:Texture[])
    + Draw(shader:Shader) : void
    - setupMesh()
}

}

Mesh::Draw <-- Model::Draw
Mesh::vertices <-- Vertex
Mesh::textures <-- Texture


class Texture {
    + <<readonly>> Handle : int
    + {static} LoadFromFile(path:string) : Texture
    + Texture(glHandle:int)
    + Use(unit:TextureUnit) : void
}
class Window {
    + shader : Shader
    + camera : Camera
    + firstMove : bool
    + lastPos : Vector2
    + time : double
    - scaleFactor : float
    - animator : animation
    + models : Model[]
    + animations : Animation[]
    + Window(gameWindowSettings:GameWindowSettings, nativeWindowSettings:NativeWindowSettings)
    + OnLoad()
    + OnRenderFrame(FrameEventArgs)
    + OnUpdateFrame(FrameEventArgs)
    + OnMouseWheel(MouseWheelEventArgs)
    + OnResize(ResizeEventArgs)
}

Window::models <-- Model
Model::meshes <-- Mesh
Program --> Window
Window::shader <-- Shader
Window::camera <-- Camera
@enduml
